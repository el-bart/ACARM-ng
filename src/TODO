* re-reading configuration from file (note: not all configuration may change at runtime).
* refactor ConfigIO - it should read configuration file and keep it in memory. proper handles for specific parts of configuration file should be implemented by interested components.
* update Persistency::Postgres::Restorer to use set<> internally instead of vector and so remove duplicates on-the-fly, then copy response to output vector.
* add parse-at-read feature to configio - config should be accepted or rejected when running application, not delayed until acctuall usage (note: this task is connected with config's refactoring to register parsers).
* ipblackfilter does not save parameters in data base - after restart the same alerts will get severity incremented once more; consider saving MetaAlertID->done/not-done as a config parameter.
* implement common configuration module for compile-time constants used in code.
* filter that increases priority for hosts that are out of defined set (i.e. from external network).
* add handle for out-of-memory problem (i.e. using own wrapper for memory manager).
* trigger reporting "the most important events" aiming to rise about N most important event in some amount of time (thresholds are variable, depending on the input).
* encrypted connections in Trigger::GG (NOTE: it appears that there are 2 standards now: GG-specific, and GNU).
* encrypted connections in Trigger::Mail.
* consider splitting configuration into multiple files (maybe directive like <include> would do the trick, preserving backward compatibility?).
* consider adding interface to Persistency::IO::Restorer that will read entry one-by-one and call some functor for each read element.
* consider appending description to correlation of meta-alerts (ex. in form of change history? maybe automatically generated?).
* implement filter that gathers stats of source/destination IPs and reports the most problematic ones with higher priority.
* implement persistency::sqlite.
* optimize postgres data restoration using roots meta alerts table.
* editable filters' parameters (i.e. ones that can be changed from WUI, if needed) - they'll allow dynamic configuration changes and interaction with admin.
* update doc/INSTALL - plugins are not described.
* add more info on development (doc/dev?).
