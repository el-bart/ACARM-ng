* re-reading configuration from file (note: not all configuration may change at runtime).
* refactor ConfigIO - it should read configuration file and keep it in memory. proper handles for specific parts of configuration file should be implemented by interested components.
* update Persistency::Postgres::Restorer to use set<> internally instead of vector and so remove duplicates on-the-fly, then copy response to output vector.
* add parse-at-read feature to configio - config should be accepted or rejected when running application, not delayed until acctuall usage (note: this task is connected with config's refactoring to register parsers).
* ipblackfilter does not save paramters in data base - after restart the same alerts will get severity incremetned once more; soncider saving MetaAlertID->done/notdone as a config paramter.
* implement common configuration module for compile-time constants used in code.
* filter that increases priority for hosts that are out of defined set (i.e. from external network).
* add automatic queue reduction to triggers - before sending check if some of the alerts are not part of others.
* add handle for out-of-memory problem (i.e. using own wrapper for memory manager).
* consider adding pre-requisites for triggers, i.e. to trigger only reports of some specific content (preprocessor-like style).
* trigger reporting "the most important events" aiming to rise about N most important event in some ammount of time (thresholds are variable, depending on the input).
* implement extra table for fast computing root meta-alerts.
* encrypted connecitons in Trigger::GG.
* encrypted connecitons in Trigger::Mail.
* consider splitig configuration into multiple files (maybe directive like <include> would do the trick, preserving backward compatibility?).
* consider adding interface to Persistency::IO::Restorer that will read entry one-by-one and call some functor for each read element.
* conisder adding indexes to speed-up SQL queries like: select * from hosts where id_alert=42;
* think about adding meta-alerts to correlation queue of a filters with reported-time, not current time as a base (to reduce overhead when system is started after some time).
* consider appending description to correlation of meta-alerts.
* persistency::postgres I/O can be optimized - it takes 90% of wall time right now, thus is main bottleneck of the whole system.
* implement filter that gathers stats of source/destination IPs and reports the most problematic noes with higher priority.
* rework severity computing algorithm to make higher priority for alerts with high-priority alerts (now main part is average...).
* add heartbeats for daemon, so that GUI will know when system is online and when it is not.
* fix chain-event filter - correlated elements must be in chronological time order!
* fix one2one filter - it doesn't seem to work...
