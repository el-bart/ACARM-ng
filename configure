#!/bin/bash
#
# autotools-like script for creating configuration
#

#
# default values
#
PREFIX="/opt"
PLUGINS="`(cd src ; ls -d persistency?* input?* trigger?* filter?*)`"
PROFILE="release"
FEATURES="lock_on_write_graph_add"

#
# helper functions
#

# print help screen
function print_help()
{
  cat<<EOF >&2
$0 options are:
  [--prefix <path>]    prefix for the installation directory (1)
  [--debug]            build in debug mode (2)
  [--list-plugins]     list all available plugin
  [--disable <plugin>] do not compile given plugin (3)
  [--list-tests]       show what tests are available
  [--test <name>]      run only specific test and exit (3)
  [-I <includes_dir>]  add extra include directory to compilation (3)
  [-L <libs_dir>]      add extra library directory to linking (3)
  [--help]             show this helpful text

(1) does not require recompilation
(2) make binary slower and much larger (~30 times)
(3) can be specified multiple times

note that you may have to set PKG_CONFIG_PATH in order to make pkg-config
work correctly, before running configure/make:
export PKG_CONFIG_PATH="\$PKG_CONFIG_PATH:/path/1:/other/path"
EOF
  exit 1
}

CFG_OUT="configure-output.mk"
LOG="configure.log"
ROOT="`readlink -f "$0" | xargs dirname`"
SRCS="$ROOT/src"


# compile implementation function
function compile_impl()
{
  local OUT="$1"
  shift
  date >> "$LOG"
  cat "$1" >> "$LOG"
  local CMD="g++ -x c++ -o "$OUT" $@ $EXTRA_COMPILE_FLAGS"
  echo "$CMD" >> "$LOG"
  $CMD >> "$LOG" 2>&1
  return "$?"
}

# compile user call
function compile()
{
  compile_impl "/dev/null" "$@"
  return "$?"
}

# compile+run user call
function compile_and_run()
{
  local BIN="`mktemp tmp.confgure.bin.XXXXXXXX`"
  compile_impl "$BIN" "$@"
  local RET="$?"
  if [ "$RET" -eq 0 ]
  then
    echo "running $BIN..." >> "$LOG"
    ./"$BIN"
    RET="$?"
  fi
  rm -f "$BIN"
  return "$RET"
}

# parse version string in form of X.Y.Z to a number
function parse_version3()
{
  sed -e 's:[^0-9\.]: :g' -e 's: *\([0-9]\+\.[0-9]\+\.[0-9]\+\) *:\1:' -e 's:\.: * 10000 + :' -e 's:\.: * 100 + :' | xargs expr
}


#
# process command line options
#

ONLY_TESTS_RUN="false"
rm -f "$LOG" "$CFG_OUT"

while [ "$#" -gt 0 ]
do
  case "$1" in
    "--prefix")
      if ! grep -q '^/' <<< "$2"
      then
        echo "$0: prefix must be an absolute path, got '$2' instead" >&2
        exit 2
      fi
      PREFIX="$2"
      echo "setting prefix to '$PREFIX'" >> "$LOG"
      shift
    ;;

    "--disable")
      PLUGINS="`echo "$PLUGINS" | xargs -n 1 -r echo | grep -v "^$2$"`"
      echo "disabling plugin '$2'" >> "$LOG"
      shift
    ;;

    "--debug")
      PROFILE="debug"
      echo "enabling debug mode" >> "$LOG"
    ;;

    "--list-plugins")
      echo "$PLUGINS" | sort
      exit 0
    ;;

    "--list-tests")
      ls misc/config_tests/ | sort
      exit 0
    ;;

    "--test")
      TESTS_TO_RUN="$TESTS_TO_RUN $2"
      ONLY_TESTS_RUN="true"
      echo "running test only mode for: $TESTS_TO_RUN" >> "$LOG"
      shift
    ;;

    "-I")
      EXTRA_COMPILE_FLAGS="$EXTRA_COMPILE_FLAGS -I$2"
      echo "extending compilation flags: $EXTRA_COMPILE_FLAGS" >> "$LOG"
      shift
    ;;

    "-L")
      EXTRA_LINK_FLAGS="$EXTRA_LINK_FLAGS -L$2"
      EXTRA_LIB_DIRS="$EXTRA_LIB_DIRS:$2"
      echo "extending linkage flags: $EXTRA_LINK_FLAGS" >> "$LOG"
      shift
    ;;

    "--help")
      print_help
    ;;

    *)
      print_help
    ;;
  esac
  shift
done
# ensure .../libs/acarm-ng is also present
EXTRA_LIB_DIRS="$PREFIX/lib/acarm-ng:$EXTRA_LIB_DIRS"
# if no explicit test(s) specified, run all
if [ -z "$TESTS_TO_RUN" ]
then
  TESTS_TO_RUN="`"$0" --list-tests | xargs -r echo -n`"
  echo "running all tests" >> "$LOG"
fi
# prepare single temporary file to work on
TMP="`mktemp tmp.confgure.XXXXXXXX`"

#
# run all tests
#
for t in $TESTS_TO_RUN
do
  echo "BEGIN: running test $1" >> "$LOG"
  source "./misc/config_tests/$t"
  echo "END: done running test $1" >> "$LOG"
  echo >> "$LOG"
done
echo "ALL TESTS ARE DONE" >> "$LOG"

#
# cleanup
#
rm -f "$TMP"
# exit, if only tests were to be run
"$ONLY_TESTS_RUN" && exit 0

#
# prepare proper make entries
#

# prepare main makefile elements
cat > "$CFG_OUT" <<EOF
LOCAL_MAKE_FLAGS+="TC=gcc"
LOCAL_MAKE_FLAGS+="PROFILE=$PROFILE"
LOCAL_MAKE_FLAGS+="FEATURES=$FEATURES"
LOCAL_MAKE_FLAGS+="EXTRA_COMPILE_FLAGS=$EXTRA_COMPILE_FLAGS"
LOCAL_MAKE_FLAGS+="EXTRA_LINK_FLAGS=$EXTRA_LINK_FLAGS"

PLUGINS_LIST:=`echo "$PLUGINS" | xargs -n 1 echo -n ' ' `
INSTALL_DIR:=$PREFIX
BUILD_DIR:=src/gen/${PROFILE}_gcc_normal_default
EOF


#
# display summary
#
echo
echo "SUMMARY:"
echo "  prefix:     $PREFIX"
echo "  profile:    $PROFILE"
echo "  plugins:"
echo "$PLUGINS" | sort | sed 's:^ *:              :'
echo "  features:   $FEATURES"
echo "  comp flags: $EXTRA_COMPILE_FLAGS"
echo "  link flags: $EXTRA_LINK_FLAGS"
echo "  lib  dirs:  $EXTRA_LIB_DIRS"
echo
