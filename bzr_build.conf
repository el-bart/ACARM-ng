#
# example implementation of function that rebuilds
# project. if you do not need this comment out all
# function lines, except for 'return 0'.
#
function build_project
{
  # check for tabs and trailing spaces
  echo "###"
  echo "### CHECKING for tabulators and trailing spaces ###"
  echo "###"
  if find daemon/[^g]* -iname '*.c' -o -iname '*.cpp' -o -iname '*.h' -o -iname '*.hpp' | \
     xargs grep -l -e $'\t' -e ' \+$'
  then
    echo >&2
    echo "ERROR: tabulators/trailing spaces found in the files listed above." >&2
	echo "ERROR: fix this before delivery." >&2
    return 102
  fi

  # check if documentation in LaTeX builds fine
  for doc in doc/testing/acceptance_tests_plan
  do
    echo "###"
    echo "### BUILDING LaTeX documentation ($doc)"
    echo "###"
    ( cd "$doc" && make ) || return $?
  done

  # supported toolchains
  which gcc >/dev/null 2>&1 && TOOLCHAINS="$TOOLCHAINS local"
  # TODO: return to ICC support ASAP
  #which icc >/dev/null 2>&1 && TOOLCHAINS="$TOOLCHAINS intel"

  # build additional features in all profiles/toolchains
  # preare configs to build
  fts[0]="simple_graph_add"
  cmps[0]="persistency"
  fts[1]="lock_on_write_graph_add"
  cmps[1]="persistency"
  # components list
  for((i=0; i<2; ++i))
  do
    for tc in $TOOLCHAINS
    do
      for p in debug release test mtest profile doc
      do
        local set="${fts[$i]}"
        local cmp="${cmps[$i]}"
        echo "###"
        echo "### BUILDING '$p' profile with '$tc' toolchain (features: $set ; components: $cmp) ###"
        echo "###"
        ( cd daemon && ./build TC="$tc" PROFILE="$p" FEATURES="$set" $cmp ) || return $?
      done # for profiles
    done # for toolchains
  done # for features

  # build all profiles (default features set)
  for tc in $TOOLCHAINS
  do
    for p in debug release test mtest profile doc
    do
      echo "###"
      echo "### BUILDING '$p' profile with '$tc' toolchain ###"
      echo "###"
      ( cd daemon && ./build TC="$tc" PROFILE="$p" ) || return $?
    done
  done

  return 0
}
