#
# helper functions
#

function build_project_coding_convertion
{
  # check for tabs and trailing spaces
  echo "###"
  echo "### CHECKING coding convention"
  echo "###"
  if ! { find src/* -iname '*.c' -o -iname '*.cpp' -o -iname '*.h' -o -iname '*.hpp' ; \
         find wui/site wui/tests -iname '*.php' -o -iname '*.page' -o -iname '*.js' ; } | \
           grep -v -e '/gen/' -e '/curlpp/' -e '/jpgraph/' -e '/prado/' -e '/OpenLayers.js' -e 'wui/site/js/' -e '/assets/' -e '/runtime/' -e '/system/' | \
           xargs -n 100 ./coding_convention_check
  then
    echo >&2
    echo "ERROR: coding convetion not met in some of the files." >&2
	echo "ERROR: fix this before delivery." >&2
    return 102
  fi

  return 0
}


function build_project_documentation
{
  # check if documentation in LaTeX builds fine
  for doc in doc/testing/acceptance_tests_plan
  do
    echo "###"
    echo "### BUILDING LaTeX documentation ($doc)"
    echo "###"
    ( cd "$doc" && make ) || return $?
  done

  return 0
}


function build_project_build_code
{
  # supported toolchains
  icc --version >/dev/null 2>&1 && TOOLCHAINS="$TOOLCHAINS intel"
  gcc --version >/dev/null 2>&1 && TOOLCHAINS="$TOOLCHAINS local"

  # build all with available toolchains
  for tc in $TOOLCHAINS
  do

    # build additional features in all profiles/toolchains.
    # preare configs to build.

    # simple_graph_add:
    fts[0]="simple_graph_add use_new_boost_filesystem"
    cmps[0]="persistency"
    # lock_on_write_graph_add:
    fts[1]="lock_on_write_graph_add use_new_boost_filesystem"
    cmps[1]="persistency"
    # use_old_boost_filesystem:
    fts[2]="lock_on_write_graph_add use_old_boost_filesystem"
    cmps[2]="commons"
    # use_new_boost_filesystem:
    fts[3]="lock_on_write_graph_add use_new_boost_filesystem"
    cmps[3]="commons"
    # components list
    for((i=0; i<4; ++i))
    do
      for p in debug release test mtest profile doc
      do
        local set="${fts[$i]}"
        local cmp="${cmps[$i]}"
        echo "###"
        echo "### BUILDING '$p' profile with '$tc' toolchain (features: $set ; components: $cmp) ###"
        echo "###"
        ( cd src && ./build TC="$tc" PROFILE="$p" FEATURES="$set" $cmp ) || return $?
      done # for profiles
    done # for features

    # build all profiles (default features set)
    for p in debug release test mtest profile doc
    do
      echo "###"
      echo "### BUILDING '$p' profile with '$tc' toolchain ###"
      echo "###"
      ( cd src && ./build TC="$tc" PROFILE="$p" ) || return $?
    done
  done # for toolchains

  return 0
}



#
# function called before doing build
#
function build_project
{
  build_project_coding_convertion || return $?
  build_project_documentation     || return $?
  build_project_build_code        || return $?
  # open ssh tunnel for the hook to run
  ssh -f -L 9989:localhost:9989 nereid sleep 10
  return 0
}

#
# enable magic buildbot notification plugin
#
export BZR_PLUGIN_PATH="$BZR_PLUGIN_PATH:`readlink -f .bzr_plugins`"
