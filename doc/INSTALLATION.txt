installation
============

this document describes, step by step, how to install ACARM-ng starting with
sources and finishing with running environment.


compilation from sources
========================

after obtaining sources from http://www.acarm.wcss.wroc.pl extract them:
$ tar xjvf acarmng.tar.bz2

enter extracted directory:
$ cd acarmng

configure installation:
$ ./configure
if you're using development version of ACARM-ng you may consider building in
debug mode (./configure --debug). you can also specify destination root path
with ./configure --prefix /my/path (default is /opt). at this stage you can
also disable plug-ins you're not willing to use/build.
if you have additional libraries installed, or have non-default paths use
-I <path> and -L <path> options.
note: ./configure --help gives you more info on usage.
note: oyu may need to set PKG_CONFIG_PATH as well (for pkg-config-aware libs).

run compilation:
$ make
note that make uses parallel build by default, depending on number of cores
your machine have.

and install to destination directories:
$ make install

although ACARM-ng can be installed anywhere, it defaults to /opt.
for simplicity of this work we'll assume however that we have installed
it to / (root) directory - this will make paths shorter and more readable.


external packages remarks
=========================

although ACARM-ng team put a lot of effort into prevent any resource leaks
in the code, some of the external components does leak memory or introduce
other 'artifacts'. if such a condition is found, is it reported to the
authors, with proper patch, if possible. we collect these patches in the
distribution as well however, in case your library has not yet been patched
for a given issue. all of them can be found in 'ext_patches' directory,
separated by the external components with directories.


running automatic tests
=======================

this step is optional, but strongly recommended. by running automated tests
you can quickly check if there are any problems with system-environment
cooperation.

enter sources directory:
$ cd acarmng/src

and build tests:
$ make PROFILE=test -j N
where N is number of parallel jobs to execute.

run all tests with following script:
$ ./run_all_tests

you should see output from test applications for all compiled components. if
something fails you'll get more verbose output.

notice that before you'll configure data base, you'll get errors from given
persistency engines about non-existing data bases, etc... see 'preparing
environment' section for more details on setting up data base and
CONFIGURATION.txt for details on setting up data base in config file.


data base
=========

there are just a few steps required to prepare data base server to run with
ACARM-ng.

PostgreSQL
----------
 1. create file with password for UI user.
 2. create file with password for daemon user.
 3. create valid data base schema:
    $ cd acarmng/data_model/<database>/<version>
    $ ./init_db <dbname> <dpf> <upf>
    where:
      dbname - data base name to be used (data base must already exists).
      dpf    - file with password for daemon.
      upf    - file with password for WUI user.

note: on most systems this script has to be run from data base administrator's
      account (in most cases 'postgres').
note: if you want to run tests create 'acarm_ng_test' data base with
      'init_test_db' script (no parameters are required).

Stubs:
------
there is no extra configuration required for this mechanism. it is just enough
to enable it in config file (see CONFIGURATION.txt for details).


Web User Interface (WUI)
========================

NOTE: though ACARM-ng does not require any data base to be configured for
      daemon to work, it is required if you want to have access to WUI.

in order to be able to access processed data via web server it has to be
configured to show directory containing required files. usually the default
configuration is just fine, as long as you provided WUI files in default
directory. since ACARM-ng automatically installs WUI to /var/www/acarm-ng,
in most cases installation means following steps:
 1. $EDITOR /var/www/default/acarm-ng/protected/application.xml
 2. find this line and replace uppercase values with your own:
    <database ConnectionString="pgsql:host=localhost;dbname=DATABASENAME" Username="acarm-ng-ui" Password="PASSWORD" />
 3. access via http://localhost/acarm-ng (move around a little to see if
    data base connections works fine)
 4. configure web server to obey .htaccess confiuration - this is
    CRUCIAL FOR SECURITY! on Apache 'AllowOverride all' has to be added to
    server's config. in order to verify it works fine try accessing
    http://localhost/acarm-ng/protected - you should get error 403 (access
    forbidden) from the server.

for more information about configuration web server (ex.: Apache2) refer
to its configuration manual.


preparing environment
=====================

next step it to prepare runtime environment for application. application will
NOT allow to be run as 'root' (for obvious, security reasons). therefore you
must create dedicated user to run system as. let us assume user's name is
'acarm-ng' and he belongs to 'acarm-ng' group:
$ groupadd acarm-ng
$ useradd -g acarm-ng -m acarm-ng

now it's a good time to configure ACARM-ng daemon. file
/etc/acarm-ng/main_config.xml contains all of the configuration. since
it consists of many sections and features, it has been described in a separate
document, namely CONFIGURATION.txt.


running
=======

assuming you have everything configured as described above, switch to
'acarm-ng' user and run daemon:
$ /bin/acarm-ng

system is now up and running! depending no how you configured logger, you can
search in proper outputs (ex. file) logged messages to see what's up at the
moment. feel free to run acarm-ng in background with nohup/screen/etc...
