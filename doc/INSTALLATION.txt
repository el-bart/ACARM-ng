installation
============

this document describes, step by step, how to install ACARM-ng starting with
sources and finishing with running environment.


compilation from sources
========================

after obtaining sources from http://www.acarm.wcss.wroc.pl extract them:
$ tar xjvf aacrmng.tar.bz2

enter sources directory:
$ cd acarmng/src

and run compilation:
$ make PROFILE=release

if make exited with no errors system compiler successfully.  note that
build process used to build ACARM-ng ensures valid dependencies and so
'make' can be run in parallel (-jN where N is number of CPUs in the system).


external packages remarks
=========================

although ACARM-ng team put a lot of effort into prevent any resource leaks
in the code, some of the external components does leak memory or introduce
other 'artifacts'. if such a condition is found, is it reported to the
authors, with proper patch, if possible. we collect these patches in the
distribution as well however, in case your library has not yet been patched
for a given issue. all of them can be found in 'ext_patches' directory,
separated by the external components with directories.


compiling without some features
===============================

there is an option of compilation without certain features, like some of the
triggers, inputs, filters or persistency types.

TODO: describe how to do this (note: script making this easier would be nice)


running automatic tests
=======================

this step is optional, but strongly recommended. by running automated tests
you can quickly check if there are any problems with system-environment
cooperation.

extract and enter sources directory (see 'compilation from sources' section
for details) and build tests:
$ make PROFILE=test

run all tests with following script:
$ ./run_all_tests

you should see output from test applications for all compiled components. if
something fails you'll get more verbose output.

notice that before you'll configure data base, you'll get errors from given
persistency engines about non-existing data bases, etc... see 'preparing
environment' section for more details on setting up data base and
CONFIGURATION.txt for details on setting up data base in config file.


data base
=========

there are just a few steps required to prepare data base server to run with
ACARM-ng.

PostgreSQL
----------
 1. create 'acarm_ng' data base on the server.
 2. create valid data base schema for this data base:
    $ cd acarmng/data_model/<database>/<version>
    $ ./init_db

note: if you want to run tests create 'acarm_ng_test' data base and use
      'init_test_db' script to fill it with data.

Stubs:
------
there is no extra configuration required for this mechanism. it is just enough
to enable it in config file (see CONFIGURATION.txt for details).


Web User Interface (WUI)
========================

NOTE: though ACARM-ng does not require any data base to be configured for
      daemon to work, it is required if you want to have access to WUI.

in order to be able to access processed data via web server it has to be
configured to show directory containing required files. usually the default
configuration is just fine, as long as you provided WUI files in default
directory. assuming default directory to be (/var/www/default), in most cases
this means following steps:
 0. cd <...>/acarm_sources_dir/
 1. cp -Lrv wui/site /var/www/default/acarm-ng/
 2. $EDITOR /var/www/default/acarm-ng/protected/application.xml
 3. find this line and replace uppercase values with your own:
    <database ConnectionString="pgsql:host=localhost;dbname=DATABASENAME" Username="acarm-ng-ui" Password="PASSWORD" />
 4. access via http://localhost/acarm-ng (move around a little to see if
    data base connections works fine)
 5. configure web server to obey .htaccess confiuration - this is
    CRUTIAL FOR SECUITY! on Apache 'AllowOverride all' has to be added to
    server config. in order to verify it works fine try accessing for example
    http://localhost/acarm-ng/protected - you should get error 403 (access
    forbidden) from the server.

for more information about configuration web server (ex.: Apache2) refer
to its configuration manual.


preparing environment
=====================

next step it to prepare runtime environment for application. application will
NOT allow to be run as 'root' (for obvious, security reasons). therefore you
must create dedicated user to run system as. let us assume user's name is
'acarm-ng' and he belongs to 'acarm-ng' group:
$ groupadd acarm-ng
$ useradd -g acarm-ng -m acarm-ng


files placement
===============

now /home/acarm-ng directory should exist. copy all required files there
(assume /tmp/acarmng is your source directory, with compiled binaries):
$ cd /home/acarm-ng
$ cp -rL /tmp/acarmng/src/gen/release_local_normal_default/libs .
$ cp /tmp/acarmng/src/gen/release_local_normal_default/acarmng/acarmng.out acarmng

now create configuration file, according to your needs and place in the same
directory as a binary (in our example this is /home/acarm-ng), under the name
'acarm_ng_config.xml'. see CONFIGURATION.txt for details on syntax and possible
options.


running
=======

assuming you have everything configured as described above, switch to
'acarm-ng' user and in the home directory run:
$ LD_LIBRARY_PATH="$HOME/libs" ./acarmng

system is now up and running! depending no how you configred logger, you can
search in proper outputs (ex. file) logged messages to see what's up at the
moment. feel free to run acarm-ng in background with nohup/screen/etc...
