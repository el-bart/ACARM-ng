configuration file format
=========================

file is an XML with sections corresponding to parsing specific settings of
components using it.
example may look like this:

<?xml version="1.0" encoding="UTF-8"?>
<acarm_ng>
  <general>
    <!-- general configuration options -->
  </general>

  <persistency>
    <!-- persistency specific options -->
  </persistency>

  <logger>
    <!-- logger specific options -->
  </logger>

  <preprocessor>
    <!-- alerts' preprocessor -->
  </preprocessor>

  <filters>
    <!-- filters' configuration -->
  </filters>

  <triggers>
    <!-- triggers' configuration -->
  </triggers>

  <inputs>
    <!-- inputs' configuration -->
  </inputs>
</acarm_ng>

in the following sections only sub-trees specific for given components will
be shown in the example, for sake of document's simplicity.


general configuration
=====================

general configuration is set of common, config parameters that are not specific
for any of the main system parts.
following options are supported:
  <general>
    <url>http://my.web.server</url> <!-- link to WUI interface -->
    <cleanupOlder>90</cleanupOlder> <!-- when doing cleanup removes entries older
                                         then given number of days (0 means do NOT cleanup) -->
    <cleanupInterval>24</cleanupInterval> <!-- clean-up procedure running interval
                                               measured in hours. note that clean-up
                                               is NOT run during program startup. -->
    <pluginsDir>/my/path</pluginsDir>     <!-- path to directory with plugins -->
  </general>


persistency configuration
=========================

configuration of persistency requires only giving its type to use and options
for it.

following persistencies are supported:

  * PostgreSQL:
<persistency>
  <type>postgres</type>
  <dbname>acarm_ng</dbname>
  <user>john</user>
  <pass>$3cr3t</pass>
  <host>db.server.my.domain.org</host>
  <port>5432</port>
</persistency>

  * Stub (no persistent storage):
<persistency>
  <type>stubs</type>
</persistency>



logger configuration
====================

logger's configuration consists of two parts: appenders configuration and
logger nodes configuration. at first appenders are created and configured,
then they are assigned to nodes. along with appenders threshold vaues can
be assigned, i.e. given node can log when message priority is no less than
a given value.

example configuration may look like this:

<logger>
  <appenders>
    <file name="file_app1">
      <output>myoutputfile.log</output>
    </file>

    <console name="stdout"/>

    <syslog name="systemlog"/>

    <multiappender name="everywhere">
      <appender>file_app1</appender>
      <appender>stdout</appender>
    </multiappender>
  </appenders>

  <nodes appender="everywhere" threshold="info"> <!-- root: default is everywhere/info -->
    <someChild appender="console"/>                       <!-- console/info -->
    <otherChild>                                          <!-- console/info -->
      <subChild1 appender="file_app1"/>                   <!-- file_app1/info -->
      <subChild2 threshold="warn"/>                       <!-- console/warn -->
      <subChild2 threshold="fatal" appender="systemlog"/> <!-- systemlog/fatal -->
    </otherChild>
  </nodes>
</logger>

following appenders are available:
  * file - writes logs to a given file
<file name="filelog">
  <output>system.log</output> <!-- file to write to -->
</file>

  * console - outputs to screen
<console name="screenout"/>

  * syslog - writes messages to syslog
<syslog name="syslogout"/>

  * multiappender - writes to given appenders (facade)
<multiappender name="writetothem">
  <appender>filelog</appender>
  <!-- ... -->
  <appender>stdout</appender>
</multiappender>

  * null - discards all logs, regardless of their priority
<null name="discardall"/>

nodes are configured in tree structure. root node is the default. each sub-node
is separeted by dot ('.'). for example following tree:
   node1
   /   \
node2 node3
         \
        node 4
has following elements:
  node1
  node1.node2
  node1.node3
  node1.node3.node4
and corresponding XML structure:
  <node1>
    <node2/>
    <node3>
      <node4/>
    </node3>
  </node1>

notice that appenders and threshold are derived from parents to childrent,
unless explicitly overwritten. thus the minimal, valid configuration for the
whole free has form:
  <nodes appender="..." threshold="..."/>
since all children will simply derive this information from their parents.


filters configuration
=====================

in filters' configuration sub-tree there are set of filter entries that are to
be configured. each entry consists of required field 'type' that determines
what type of filter is to be created and optional, filter-specific fields.
example configuration may look like this:

<filters>
  <onetomany name="o2m">
    <timeout>42</timeout> <!-- timeout for observing entry, in seconds -->
  </onetomany>
</filters>

following filters and parameters are available:

  <!-- correlates attacks from one host to another -->
  <onetoone name="o2o">
    <timeout>42</timeout> <!-- timeout for observing entry, in seconds -->
  </onetoone>

  <!-- correlates multiple attacks originated from single host -->
  <onetomany name="o2m">
    <timeout>42</timeout> <!-- timeout for observing entry, in seconds -->
  </onetomany>

  <!-- correlates multiple attacks originated from single host -->
  <manytoone name="m2o">
    <timeout>42</timeout> <!-- timeout for observing entry, in seconds -->
  </manytoone>

  <!-- correlates multiple attacks directed on many host -->
  <manytomany name="m2m">
    <timeout>42</timeout>         <!-- timeout for observing entry, in seconds -->
    <similarity>0.75</similarity> <!-- minimum similarity between meta-alerts to
                                       correlate them (valid values are from (0;1] range) -->
  </manytomany>

  <!-- performs reverse-DNS mapping on hosts that do not have DNS name set -->
  <dnsresolver name="dns">
    <cachetimeout>3600</cachetimeout> <!-- time to keep cached DNS mappings -->
  </dnsresolver>

  <!-- updates severity of given meta-alert if it includes source-host that is blacklisted -->
  <ipblacklist name="ip_blacklist">
    <refresh>36000</refresh> <!-- how often refresh list of black-listed IPs in seconds -->
    <limit>10000</limit>     <!-- limits number of entries to be downloaded -->
    <priorityDelta>0.8</priorityDelta> <!-- amount to update priority by when black-listed IP's found -->
  </ipblacklist>

  <!-- correlates multiple attacks with the name name (short description) -->
  <samename name="same_name">
    <timeout>42</timeout> <!-- timeout for observing entry, in seconds -->
  </samename>

  <!-- finds chains of events and updates severity delta by a given ammount -->
  <eventchain name="event_chain">
    <timeout>42</timeout>              <!-- timeout for observing entry, in seconds -->
    <priorityDelta>0.8</priorityDelta> <!-- amount to update priority by when correlating -->
  </eventchain>

  <!-- filter correlating actions of each user -->
  <usersmonitor name="usrmon">
    <timeout>42</timeout>      <!-- timeout for observing entry, in seconds -->
    <skip>root www-data</skip> <!-- space-separated list of users not to correlate for -->
  </usersmonitor>


triggers configuration
======================

triggers are provided in order to be able to react on events reported by filters.
though triggers are generic mechanisms, basically there are two use cases:
reporting problem to human (administrator) and/or taking autonomous actions
(ex. prohibiting problematic host on the firewall).
there are ready-to-go triggers provided with ACARM-ng described in this section,
though users can easily implement more of them via generic registration mechanism.

general layout of triggers' configuration looks similar to filters' configuration:
<triggers>
  <trigger1 name="t1">
    <opt1>...</opt1>
    <opt2>...</opt2>
  </trigger1>
  <trigger2 name="t2">
    <opt1>...</opt1>
    <opt2>...</opt2>
    <opt3>...</opt3>
  </trigger2>
</triggers>

below are listed implemented triggers along with their implementation.

<!-- Gadu-Gadu instant messenger notification
     NOTE: you must create separate account for sending messages with this
           trigger, otherwise it may not work as expected, due to Gadu-Gadu
           protocol specific details.
     NOTE: Gadu-Gadu server drops messages that contain URLs in them and are
           send from accounts not reported to be known by the receiver,
           therefore you must add ACARM-ng's GG account to users list in your
           communicator in order to get any messages.
-->
<gg name="msg2bob">
  <uin>12345</uin>                   <!-- GG account number -->
  <password>my$3cr337</password>     <!-- password for this account-->
  <receivers>12345 2334</receivers>  <!-- list of GG accounts to notify -->

  <severity_threshold>3.14</severity_threshold>       <!-- minimal severity (optional) -->
  <alerts_count_threshold>42</alerts_count_threshold> <!-- minimal correlated alerts count (optional)-->
</gg>

<!-- Jabber instant messenger notification -->
<jabber name="msg2bob">
  <login>acarm-ng1</login>                            <!-- login for Jabber account-->
  <password>my$3cr337</password>                      <!-- password for this account-->
  <server>jabber.org</server>                         <!-- Jabber server-->
  <receivers>me@jabber.org you@jabber.org</receivers> <!-- list of Jabber accounts to notify -->

  <severity_threshold>3.14</severity_threshold>       <!-- minimal severity (optional) -->
  <alerts_count_threshold>42</alerts_count_threshold> <!-- minimal correlated alerts count (optional)-->
</jabber>

<!-- mail notification about security issue -->
<mail name="email_admin">
  <from>robot@e.mail.org</from>    <!-- e-mail to send from -->
  <to>admin@x.com me@x.com</to>    <!-- e-mail(s) to send reports to -->
  <server>smtp.e.mail.org</server> <!-- server's address -->
  <rootca>/my/root/ca.pem</rootca> <!-- certificate of root Certificate Authorith (PEM or DER format) of issuer for server's certificate -->
  <port>465</port>                 <!-- port server's listening on -->
  <protocol>smtp</protocol>        <!-- protocol type (smtp) -->
  <security>ssl</security>         <!-- secure connection type (ssl/starttls) -->
  <user>robot</user>               <!-- username to authenticate with (optional) -->
  <password>topsi-kret</password>  <!-- password for username (required when 'user' is set) -->

  <severity_threshold>3.14</severity_threshold>       <!-- minimal severity (optional) -->
  <alerts_count_threshold>42</alerts_count_threshold> <!-- minimal correlated alerts count (optional)-->
</mail>

<!-- trigger creating longer reports in files -->
<file name="file_write">
  <outdir>/some/output/directory</outdir>             <!-- directory to write reports to -->

  <severity_threshold>3.14</severity_threshold>       <!-- minimal severity (optional) -->
  <alerts_count_threshold>42</alerts_count_threshold> <!-- minimal correlated alerts count (optional)-->
</file>

<!-- trigger calling user's application -->
<extapp name="call_my_scrpt">
  <executable>/some/app</executable> <!-- application or script to run when threshold is reached.
                                          syntax of call is as follows:
                                            /some/app <dir> <count> <priority> <certainty>
                                          where:
                                            /some/app is application that user specifies in config.
                                            <dir>       is output directory, where all correlated alerts are
                                                        saved in IDMEF format (idmef_<id>.xml file name).
                                            <count>     is a number of alerts (correlated).
                                            <priority>  is priority assigned to this (meta) alert (floating point value).
                                            <certainty> is certainty level assigned for this meta alert, in [0;1] range.
                                     -->

  <severity_threshold>3.14</severity_threshold>       <!-- minimal severity (optional) -->
  <alerts_count_threshold>42</alerts_count_threshold> <!-- minimal correlated alerts count (optional)-->
</extapp>

note that severity_threshold and alerts_count_threshold are OR'ed, i.e. if
any one of them is reached, meta-alert is reported. they are both optional
parameters as well, i.e. they may be skipped in configuration, that will
result in not checking given criteria. so if user would like to be informed
about all meta-alerts that correlate at least N alerts, (s)he should set
alerts_count_threshold to N and skip severity_threshold parameter at all.


inputs configuration
====================

inputs are alerts-gathering mechanisms in ACARM-ng. each of them reads alerts
and passess them to system for correlation and processing.

following inputs are available:

  * prelude - reads alerts from Prelude-Manager. for more pieces of information
              regarding Prelude-Manager configuration and sensors registration
              refer Prelude-Manager's manual.
<prelude name="myprelude1">
  <profile>acarm-ng_profile</profile>               <!-- profile created for prelude "reading-sensor": ACARM-ng -->
  <config>/etc/prelude/default/client.conf</config> <!-- client config for prelude -->
</prelude>

  * file - reads alerts from files in IDMEF format. file names to read from are
           given via fifo queue in the filesystem. if queue does not exist it
           will be created. if it does exist it will be opened.
<file name="idmef_files">
  <fifo>/path/to/fifo/queue</fifo> <!-- queue to read files names from -->
</file>


preprocessor configuration
==========================

preprocessor is a tool to allow removing certain alerts just after receiving them.
this is useful when there are known facilities that generates useless alerts that
are not to be correlated. rejected alert are only saved in system's data base (only
log is generated about this event - they are not processed any further).
default behavior is to accept alert (ex.: when this section is empty).

top level structure looks like this:
<preprocessor>
  <!-- ... -->
  <accept>
    <!-- ... -->
  </accept>
  <!-- ... -->
  <reject>
    <!-- ... -->
  </reject>
  <!-- ... -->
</preprocessor>

section(s) 'reject' and 'accept' contains sets of rules in form of logical expressions
(they are described later on). if given expression is true, alert is accepted or
rejected, respectively. if alert does not match rules specified in given section
then next section is processed. algorithm repeats until first section does match.
if no section match, alert is accepted by default.

logical expression consists of 'and', 'or' and 'not' statements, that can be
nested. 'and' statement is true when all statement(s) listed inside are true.
'or' statement is true when at least one statement(s) listed inside is true. 'not'
statement is true when statement (exactly one!) listed inside is false.
example statement, that can be placed inside 'accept'/'reject' section can look
like this:
<and>
  <A/>
  <B/>
  <not> <C/> </not>
  <or>
    <not> <D/> </not>
  </or>
  <not>
    <or>
      <E>
      <F>
    </or>
  </not>
</and>

assuming A,B,C,D,E,F are rules (rules are described later on in this section)
logical condition is: ( A && B && (!C) && ( !D ) && !( E || F ) ).

there are 3 possible rules: 'true', 'false' and 'rule'. 'true' is term indicating
true. 'false' is term indicating false. 'rule' is rule to be evaluated for a given
alert and may be true or false depending on alert's content.
'rule' have two parameters: 'path' and comparison mode ('equals' or 'contains' -
they are described later on).
example rules can look like this:
<true>  <!-- always true -->
<false> <!-- always false-->
<rule path="A" equals="B"/>   <!-- true if element A has value B -->
<rule path="A" contains="B"/> <!-- true if element A contains string B -->
'path' consists of string that represents position in alerts' hierarchy. assuming
that all collection types are marked as '[]' in place of element's index the full
tree looks like this:
-------------
alert.name
alert.detected
alert.created
alert.certainty
alert.severity
alert.description
alert.analyzers.[].name
alert.analyzers.[].version
alert.analyzers.[].os
alert.analyzers.[].ip
alert.sources.[].ip
alert.sources.[].mask
alert.sources.[].os
alert.sources.[].url.name
alert.sources.[].url.url
alert.sources.[].name
alert.sources.[].services.[].name
alert.sources.[].services.[].port
alert.sources.[].services.[].protocol
alert.sources.[].services.[].url.name
alert.sources.[].services.[].url.url
alert.sources.[].processes.[].path
alert.sources.[].processes.[].name
alert.sources.[].processes.[].md5
alert.sources.[].processes.[].pid
alert.sources.[].processes.[].uid
alert.sources.[].processes.[].username
alert.sources.[].processes.[].arguments
alert.sources.[].processes.[].url.name
alert.sources.[].processes.[].url.url
alert.targets.[].ip
alert.targets.[].mask
alert.targets.[].os
alert.targets.[].url.name
alert.targets.[].url.url
alert.targets.[].name
alert.targets.[].services.[].name
alert.targets.[].services.[].port
alert.targets.[].services.[].protocol
alert.targets.[].services.[].url.name
alert.targets.[].services.[].url.url
alert.targets.[].processes.[].path
alert.targets.[].processes.[].name
alert.targets.[].processes.[].md5
alert.targets.[].processes.[].pid
alert.targets.[].processes.[].uid
alert.targets.[].processes.[].username
alert.targets.[].processes.[].arguments
alert.targets.[].processes.[].url.name
alert.targets.[].processes.[].url.url
-------------
notice that since elements in collections are in undefined order there are no
indexes available. instead two markers are present: '*' and '$'. putting '*' in
place of collection index means 'all elements must be match given rule'.
putting '$' in place of collection index means 'any element must match given
rule'.

example configs along with description goes here:

<preprocessor>
  <accept>
    <and>
      <rule path="alert.name"        contains="ssh"/>
      <rule path="alert.target.$.ip" equals="1.2.3.4"/>
    </and>
  </accept>
  <reject>
    <true/>
  </reject>
</preprocessor>
accepts only alerts that name contains string 'ssh' and at least one target host
is '1.2.3.4'. all other alerts will be rejected.

<preprocessor>
  <reject>
    <rule path="alert.source.*.name" equals="my.security.scanner.org"/>
  </reject>
</preprocessor>
rejects all alerts that were generated by source host whose name's
"my.security.scanner.org". all other alerts will be accepted. notice
that we use '*' here, so if alert will consist of reports generated
by multiple hosts (including 'my.security.scanner.org') alert may still
be accepted. this is safe approach in this context.
