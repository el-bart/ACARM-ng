configuration file format
=========================

file is an XML with sections corresponding to parsing specific settings of
components using it.
example may look like this:

<?xml version="1.0" encoding="UTF-8"?>
<acarm_ng>
  <general>
    <!-- general configuration options -->
  </general>

  <persistency>
    <!-- persistency specific options -->
  </persistency>

  <logger>
    <!-- logger specific options -->
  </logger>

  <preprocessor>
    <!-- alerts' preprocessor -->
  </preprocessor>

  <filters>
    <!-- filters' configuration -->
  </filters>

  <triggers>
    <!-- triggers' configuration -->
  </triggers>

  <inputs>
    <!-- inputs' configuration -->
  </inputs>
</acarm_ng>

in the following sections only sub-trees specific for given components will
be shown in the example, for sake of document's simplicity.

since more sophisticated configurations can take more space and require some
parts of code to be c&p multiple times, inclusion of config files has been
introduced. it works by replacing part of the configuration file's subtree
with "<include>path/to/file.xml</include>" directive. path is computed
starting with root directory of the current file. included file must be an
XML file as well, with root node named "include".

for example, for directory structure file this:
  a.xml
  dir1/f_all.xml
  dir1/f1.xml
  dir1/f2.xml
  dir2/f3.xml

inclusion from a.xml can look like this:

a.xml:
<?xml version="1.0" encoding="UTF-8"?>
<acarm_ng>
  <something>
    <!-- ... -->
  </something>
  <include>dir1/f_all.xml</include>
</acarm_ng>

dir1/f_all.xml:
<?xml version="1.0" encoding="UTF-8"?>
<include>
  <include>f1.xml</include>
  <include>f2.xml</include>
  <include>../dir2/f3.xml</include>
</include>

dir1/f1.xml:
<?xml version="1.0" encoding="UTF-8"?>
<include>
  <a>sth</a>
</include>

dir1/f2.xml:
<?xml version="1.0" encoding="UTF-8"?>
<include>
  <xyz name="aaa"/>
</include>

dir2/f3.xml:
<?xml version="1.0" encoding="UTF-8"?>
<include>
  <v>6.66</v>
</include>

it would be equivalent to single file of this form:

<?xml version="1.0" encoding="UTF-8"?>
<acarm_ng>
  <something>
    <!-- ... -->
  </something>
  <a>sth</a>
  <xyz name="aaa"/>
  <v>6.66</v>
</acarm_ng>


general configuration
=====================

general configuration is set of common, config parameters that are not specific
for any of the main system parts.
following options are supported:
  <general>
    <url>http://my.web.server</url> <!-- link to WUI interface -->
    <cleanupOlder>90</cleanupOlder> <!-- when doing cleanup removes entries older
                                         then given number of days (0 means do NOT cleanup) -->
    <cleanupInterval>24</cleanupInterval> <!-- clean-up procedure running interval
                                               measured in hours. note that clean-up
                                               is NOT run during program startup. -->
    <pluginsDir>/my/path</pluginsDir>     <!-- path to directory with plugins -->
  </general>


persistency configuration
=========================

configuration of persistency requires only giving its type to use and options
for it.

following persistencies are supported:

  * PostgreSQL:
<persistency>
  <type>postgres</type>
  <dbname>acarm_ng</dbname>
  <user>john</user>
  <pass>s3cr3t</pass>
  <host>db.server.my.domain.org</host>
  <port>5432</port>
</persistency>

  * Stub (no persistent storage):
<persistency>
  <type>stubs</type>
</persistency>



logger configuration
====================

logger's configuration consists of two parts: appenders configuration and
logger nodes configuration. at first appenders are created and configured,
then they are assigned to nodes. along with appenders threshold values can
be assigned, i.e. given node can log when message priority is no less than
a given value.

example configuration may look like this:

<logger>
  <appenders>
    <file name="file_app1">
      <output>myoutputfile.log</output>
    </file>

    <console name="stdout"/>

    <syslog name="systemlog"/>

    <multiappender name="everywhere">
      <appender>file_app1</appender>
      <appender>stdout</appender>
    </multiappender>
  </appenders>

  <nodes appender="everywhere" threshold="info"> <!-- root: default is everywhere/info -->
    <someChild appender="console"/>                       <!-- console/info -->
    <otherChild>                                          <!-- console/info -->
      <subChild1 appender="file_app1"/>                   <!-- file_app1/info -->
      <subChild2 threshold="warn"/>                       <!-- console/warn -->
      <subChild2 threshold="fatal" appender="systemlog"/> <!-- systemlog/fatal -->
    </otherChild>
  </nodes>
</logger>

following appenders are available:
  * file - writes logs to a given file
<file name="filelog">
  <output>system.log</output> <!-- file to write to -->
</file>

  * console - outputs to screen
<console name="screenout"/>

  * syslog - writes messages to syslog
<syslog name="syslogout"/>

  * multiappender - writes to given appenders (facade)
<multiappender name="writetothem">
  <forward>filelog</forward>
  <!-- ... -->
  <forward>stdout</forward>
</multiappender>

  * null - discards all logs, regardless of their priority
<null name="discardall"/>

nodes are configured in tree structure. root node is the default. each sub-node
is separeted by dot ('.'). for example following tree:
   node1
   /   \
node2 node3
         \
        node 4
has following elements:
  node1
  node1.node2
  node1.node3
  node1.node3.node4
and corresponding XML structure:
  <node1>
    <node2/>
    <node3>
      <node4/>
    </node3>
  </node1>

notice that appenders and threshold are derived from parents to children,
unless explicitly overwritten. thus the minimal, valid configuration for the
whole free has form:
  <nodes appender="..." threshold="..."/>
since all children will simply derive this information from their parents.


filters configuration
=====================

in filters' configuration sub-tree there are set of filter entries that are to
be configured. each entry consists of required field 'type' that determines
what type of filter is to be created and optional, filter-specific fields.
example configuration may look like this:

<filters>
  <onetomany name="o2m">
    <timeout>42</timeout> <!-- timeout for observing entry, in seconds -->
  </onetomany>
</filters>

following filters and parameters are available:

  <!-- correlates attacks from one host to another -->
  <onetoone name="o2o">
    <timeout>42</timeout> <!-- timeout for observing entry, in seconds -->
  </onetoone>

  <!-- correlates multiple attacks originated from single host -->
  <onetomany name="o2m">
    <timeout>42</timeout> <!-- timeout for observing entry, in seconds -->
  </onetomany>

  <!-- correlates multiple attacks originated from single host -->
  <manytoone name="m2o">
    <timeout>42</timeout> <!-- timeout for observing entry, in seconds -->
  </manytoone>

  <!-- correlates multiple attacks directed on many host -->
  <manytomany name="m2m">
    <timeout>42</timeout>         <!-- timeout for observing entry, in seconds -->
    <similarity>0.75</similarity> <!-- minimum similarity between meta-alerts to
                                       correlate them (valid values are from (0;1] range) -->
  </manytomany>

  <!-- performs reverse-DNS mapping on hosts that do not have DNS name set -->
  <dnsresolver name="dns">
    <cachetimeout>3600</cachetimeout> <!-- time to keep cached DNS mappings -->
  </dnsresolver>

  <!-- updates severity of given meta-alert if it includes source-host that is blacklisted -->
  <ipblacklist name="ip_blacklist">
    <refresh>36000</refresh> <!-- how often refresh list of black-listed IPs in seconds -->
    <limit>10000</limit>     <!-- limits number of entries to be downloaded -->
    <priorityDelta>0.8</priorityDelta> <!-- amount to update priority by when black-listed IP's found -->
  </ipblacklist>

  <!-- correlates multiple attacks with the name name (short description) -->
  <samename name="same_name">
    <timeout>42</timeout> <!-- timeout for observing entry, in seconds -->
  </samename>

  <!-- finds chains of events and updates severity delta by a given amount -->
  <eventchain name="event_chain">
    <timeout>42</timeout>              <!-- timeout for observing entry, in seconds -->
    <priorityDelta>0.8</priorityDelta> <!-- amount to update priority by when correlating -->
  </eventchain>

  <!-- filter correlating actions of each user -->
  <usersmonitor name="usrmon">
    <timeout>42</timeout>      <!-- timeout for observing entry, in seconds -->
    <skip>root www-data</skip> <!-- space-separated list of users not to correlate for -->
  </usersmonitor>

  <!-- correlates attacks that are similar (text differences, IPs similarity, etc...) -->
  <similarity name="sim">
    <timeout>42</timeout>          <!-- timeout for observing entry, in seconds -->
    <similarity>0.80</similarity>  <!-- similarity threshold to correlate with -->
  </similarity>

  <!-- increases meta-alert's priority by a given amount when it has name not found before -->
  <newevent name="new_event">
    <timeout>42</timeout>              <!-- timeout for observing entry, in seconds -->
    <priorityDelta>0.8</priorityDelta> <!-- amount to update priority by when correlating -->
  </newevent>

  <!-- calls Python code to perform correlation

       python script defines derived class, that implements required correlation feature
       and create its instance under 'derived' variable name. ACARM-ng runs this script once
       in order to obtain inherited class and then uses it from C++ code.

       inherited class must be of a following form:

       ## class implements given interface and runs python code on request.
       #  structure is done like this: each meta-alert arriving has associated data
       #  (optional parameter - can be None). this data is filter-specific, not shared
       #  between other calls.
       #  for each incoming meta-alert it is checked against every saved one to
       #  see if they can correlate. if yes, then it is either correlated to create new
       #  entry (i.e. correlating two leafs) or add correlated meta-alert to already
       #  correlated entry (i.e. correlating node with leaf/node).
       class EmptyPythonFilter(filter.BaseWrapper):
         ## returns True/False when given meta-alert (ma) is interesting and can
         #  be processed further. if this call returns False given meta-alert will not
         #  be saved for further correlations.
         def isEntryInterestingImpl(self, ma, data):
           return True
         ## returns name for newly correlated meta-alert. both entries, used for correlation,
         #  and their data, can be used to generate proper name.
         def getMetaAlertNameImpl(self, maThis, thisData, maOther, otherData):
           return "hitchhiker's guide to the galaxy"
         ## returns True/False when element can be correlated with other one.
         #  each entry has already computed 'data' elements, that can make check much faster.
         def canCorrelateImpl(self, maThis, thisData, maOther, otherData):
           return False
         ## makes 'data' entry for an incoming meta-alert. this data is then associated with
         #  it and used for checking if it "interesting" for further processing.
         def makeThisEntryUserDataImpl(self, ma):
           return None
         ## make 'data' entry for a newly correlated node. source nodes, used for correlation,
         #  are given as a parameters, along with newly correlated entry.
         def makeUserDataForNewNodeImpl(self, maThis, thisData, maOther, otherData, maNewNode):
           return None

       it 'data' element is not needed returning 'None' is fine. if some data is to be
       stored however, it must have proper form:

       ## example data class implementation. it has to be derived from filter.DataWrapper in
       #  order to be manageable from C++ native code.
       class SomeTestDataImpl(filter.DataWrapper):
         ## explicit constructor for this object is optional, though it is reasonable
         #  to have one. when it is implemented it has to call base-implementation on
         #  (the Python style), or else strange errors will arose, about Python interpreter
         #  wrapper being unable to perform some convertions.
         def __init__(self, something):
           filter.DataWrapper.__init__(self)
           ## filed to be saved
           self.sth=something

       so the final structure of the plugin should look like this:
       ## optional data implementation class
       class SomeTestDataImpl(filter.DataWrapper):
         # implementation goes here...
       ## correlation engine implementation.
       class SomePythonFilter(filter.BaseWrapper):
         # implementation, as described above, goes here...
       # creating instance of a correlation object
       derived=SomePythonFilter()
  -->
  <python name="snake_correlator">
    <timeout>42</timeout>               <!-- timeout for observing entry, in seconds -->
    <script>/path/to/script.py</script> <!-- python script initializing implementation -->
  </python>

triggers configuration
======================

triggers are provided in order to be able to react on events reported by filters.
though triggers are generic mechanisms, basically there are two use cases:
reporting problem to human (administrator) and/or taking autonomous actions
(ex. prohibiting problematic host on the firewall).
there are ready-to-go triggers provided with ACARM-ng described in this section,
though users can easily implement more of them via generic registration mechanism.

general layout of triggers' configuration looks similar to filters' configuration:
<triggers>
  <trigger1 name="t1">
    <opt1>...</opt1>
    <opt2>...</opt2>
  </trigger1>
  <trigger2 name="t2">
    <opt1>...</opt1>
    <opt2>...</opt2>
    <opt3>...</opt3>
  </trigger2>
</triggers>

below are listed implemented triggers along with their implementation.

<!-- Gadu-Gadu instant messenger notification
     NOTE: you must create separate account for sending messages with this
           trigger, otherwise it may not work as expected, due to Gadu-Gadu
           protocol specific details.
     NOTE: Gadu-Gadu server drops messages that contain URLs in them and are
           send from accounts not reported to be known by the receiver,
           therefore you must add ACARM-ng's GG account to users list in your
           communicator in order to get any messages.
-->
<gg name="msg2bob">
  <uin>12345</uin>                   <!-- GG account number -->
  <password>myS3cr337</password>     <!-- password for this account-->
  <receivers>12345 2334</receivers>  <!-- list of GG accounts to notify -->

  <severity_threshold>3.14</severity_threshold>       <!-- minimal severity (optional) -->
  <alerts_count_threshold>42</alerts_count_threshold> <!-- minimal correlated alerts count (optional)-->
</gg>

<!-- Jabber instant messenger notification -->
<jabber name="msg2bob">
  <login>acarm-ng1</login>                            <!-- login for Jabber account-->
  <password>myS3cr337</password>                      <!-- password for this account-->
  <server>jabber.org</server>                         <!-- Jabber server-->
  <receivers>me@jabber.org you@jabber.org</receivers> <!-- list of Jabber accounts to notify -->

  <severity_threshold>3.14</severity_threshold>       <!-- minimal severity (optional) -->
  <alerts_count_threshold>42</alerts_count_threshold> <!-- minimal correlated alerts count (optional)-->
</jabber>

<!-- mail notification about security issue -->
<mail name="email_admin">
  <from>robot@e.mail.org</from>    <!-- e-mail to send from -->
  <to>admin@x.com me@x.com</to>    <!-- e-mail(s) to send reports to -->
  <server>smtp.e.mail.org</server> <!-- server's address -->
  <rootca>/my/root/ca.pem</rootca> <!-- certificate of root Certificate Authorith (PEM or DER format) of issuer for server's certificate -->
  <port>465</port>                 <!-- port server's listening on -->
  <protocol>smtp</protocol>        <!-- protocol type (smtp) -->
  <security>ssl</security>         <!-- secure connection type (ssl/starttls) -->
  <user>robot</user>               <!-- user name to authenticate with (optional) -->
  <password>topsi-kret</password>  <!-- password for user name (required when 'user' is set) -->

  <severity_threshold>3.14</severity_threshold>       <!-- minimal severity (optional) -->
  <alerts_count_threshold>42</alerts_count_threshold> <!-- minimal correlated alerts count (optional)-->
</mail>

<!-- send mail notification about problematic machines to admins found via WHOIS-->
<whois name="">
  <template>/path/to/message/template</template> <!-- path to file which contains e-mail message template -->
  <from>robot@e.mail.org</from>                  <!-- e-mail to send from -->
  <to>admin@x.com me@x.com</to>                  <!-- e-mail(s) to send reports to -->
  <cc>admin@y.com otheradmin@y.com</cc>          <!-- e-mail(s) to send reports copy to -->
  <rootca>/my/root/ca.pem</rootca>               <!-- certificate of root Certificate Authorith (PEM or DER format) of issuer for server's certificate -->
  <port>465</port>                               <!-- port server's listening on -->
  <protocol>smtp</protocol>                      <!-- protocol type (smtp) -->
  <security>ssl</security>                       <!-- secure connection type (ssl/starttls) -->
  <user>robot</user>                             <!-- user name to authenticate with (optional) -->
  <password>topsi-kret</password>                <!-- password for user name (required when 'user' is set) -->

  <severity_threshold>3.14</severity_threshold>       <!-- minimal severity (optional) -->
  <alerts_count_threshold>42</alerts_count_threshold> <!-- minimal correlated alerts count (optional)-->
<whois>

<!-- trigger creating longer reports in files -->
<file name="file_write">
  <outdir>/some/output/directory</outdir>             <!-- directory to write reports to -->

  <severity_threshold>3.14</severity_threshold>       <!-- minimal severity (optional) -->
  <alerts_count_threshold>42</alerts_count_threshold> <!-- minimal correlated alerts count (optional)-->
</file>

<!-- trigger calling user's application -->
<extapp name="call_my_scrpt">
  <executable>/some/app</executable> <!-- application or script to run when threshold is reached.
                                          syntax of call is as follows:
                                            /some/app <dir> <count> <priority> <certainty>
                                          where:
                                            /some/app is application that user specifies in config.
                                            <dir>       is output directory, where all correlated alerts are
                                                        saved in IDMEF format (idmef_<id>.xml file name).
                                            <count>     is a number of alerts (correlated).
                                            <priority>  is priority assigned to this (meta) alert (floating point value).
                                            <certainty> is certainty level assigned for this meta alert, in [0;1] range.
                                     -->

  <severity_threshold>3.14</severity_threshold>       <!-- minimal severity (optional) -->
  <alerts_count_threshold>42</alerts_count_threshold> <!-- minimal correlated alerts count (optional)-->
</extapp>

<!-- trigger runngin implementation defined in python code.

     python code defined in the script file ust have defined form. it implements class derived from
     trigger.BaseWrapper and implement triggerImpl(self,ma) method. then an instance of this class
     must be created and saved as a variable 'derived'.

     when meta alert is triggered, triggerImpl() method is called so that implementation can
     do whatever it wants and save data inside object, if it likes (the same object will be used
     for all of the calls).

     to access meta-alert's content use get() method of 'ma' object. it takes a string that
     specifies field to take and return OptionalString as a response. to get python string from
     it use 'get()' method of OptionalStirng. notice that value returned from ma.get(...) can be None.

     specification of element to get is simillar to the one used by prefilter, except that collections
     are not handle by wildcards '*' and '$' but have 'size' attribute to check their size.
     they can be accessed later on with indexes, starting with zero. for example: if colleciton.size is
     2 then 0 and 1 are valid indexes, so 'sth' field of colleciton element can be accessed with
     collection.0.sth and collection.1.sth.

     example imeplementation can look as follows:

# definition of implementation
class EmptyPythonTrigger(trigger.BaseWrapper):
  def triggerImpl(self, ma):
    print("hello world! meta alert's ID is " + ma.get("metaalert.id").get())

# return instance to the C++ code
derived=EmptyPythonTrigger()
-->
<python name="">
  <script>/some/python/script.py</script>             <!-- script with trigger implementation -->

  <severity_threshold>3.14</severity_threshold>       <!-- minimal severity (optional) -->
  <alerts_count_threshold>42</alerts_count_threshold> <!-- minimal correlated alerts count (optional)-->
</python>

<!-- trigger setting firewalls with SnortSam (see http://www.snortsam.net)

     snortsam is a Snort (http://www.snort.org) plugin for handling firewall actions
     like setting/removing firewall rules to block defined 
-->
<snortsam name="local_fw_ips_sys">
  <host>127.0.0.1</host>                              <!-- IP/name of host agent is installed on -->
  <port>898</port>                                    <!-- port agent is listening on -->
  <key>sharedpassword</key>                           <!-- secret key to use for encryption -->
  <who>src</who>                                      <!-- "src", "dst" or both -->
  <how>in out</how>                                   <!-- "in", "out" or both -->
  <duration>42</duration>                             <!-- number of seconds to block traffic for -->

  <severity_threshold>3.14</severity_threshold>       <!-- minimal severity (optional) -->
  <alerts_count_threshold>42</alerts_count_threshold> <!-- minimal correlated alerts count (optional)-->
</snortsam>

note that severity_threshold and alerts_count_threshold are OR'ed, i.e. if
any one of them is reached, meta-alert is reported. they are both optional
parameters as well, i.e. they may be skipped in configuration, that will
result in not checking given criteria. so if user would like to be informed
about all meta-alerts that correlate at least N alerts, (s)he should set
alerts_count_threshold to N and skip severity_threshold parameter at all.

since v0.4.0 is is also possible to specify preprocessor rules for limiting trigger
usage even more. it allows easy writing rules that operate on narrowed alerts.
example usage is limiting firewall reconfiguration to hosts from external network,
to limit false-positives to a minimum.


inputs configuration
====================

inputs are alerts-gathering mechanisms in ACARM-ng. each of them reads alerts
and passes them to system for correlation and processing.

following inputs are available:

  * prelude - reads alerts from Prelude-Manager. for more pieces of information
              regarding Prelude-Manager configuration and sensors registration
              refer Prelude-Manager's manual.
<prelude name="myprelude1">
  <heartbeat>400</heartbeat>                        <!-- timeout for prelude heartbeats, in seconds -->
  <profile>acarm-ng_profile</profile>               <!-- profile created for prelude "reading-sensor": ACARM-ng -->
  <config>/etc/prelude/default/client.conf</config> <!-- client config for prelude -->
</prelude>

  * file - reads alerts from files in IDMEF format. file names to read from are
           given via fifo queue in the filesystem. if queue does not exist it
           will be created. if it does exist it will be opened.
<file name="idmef_files">
  <fifo>/path/to/fifo/queue</fifo> <!-- queue to read files names from -->
</file>


preprocessor configuration
==========================

preprocessor is a tool to allow removing certain alerts just after receiving them.
this is useful when there are known facilities that generates useless alerts that
are not to be correlated. rejected alert are only saved in system's data base (only
log is generated about this event - they are not processed any further).
default behavior is to accept alert (ex.: when this section is empty).

the same syntax is used everywhere where 'preprocessor' is in use.

top level structure looks like this:
<preprocessor>
  <!-- ... -->
  <accept>
    <!-- ... -->
  </accept>
  <!-- ... -->
  <reject>
    <!-- ... -->
  </reject>
  <!-- ... -->
</preprocessor>

section(s) 'reject' and 'accept' contains sets of rules in form of logical expressions
(they are described later on). if given expression is true, alert is accepted or
rejected, respectively. if alert does not match rules specified in given section
then next section is processed. algorithm repeats until first section does match.
if no section match, alert is accepted by default.

logical expression consists of 'and', 'or' and 'not' statements, that can be
nested. 'and' statement is true when all statement(s) listed inside are true.
'or' statement is true when at least one statement(s) listed inside is true. 'not'
statement is true when statement (exactly one!) listed inside is false.
example statement, that can be placed inside 'accept'/'reject' section can look
like this:
<and>
  <A/>
  <B/>
  <not> <C/> </not>
  <or>
    <not> <D/> </not>
  </or>
  <not>
    <or>
      <E>
      <F>
    </or>
  </not>
</and>

assuming A,B,C,D,E,F are rules (rules are described later on in this section)
logical condition is: ( A && B && (!C) && ( !D ) && !( E || F ) ).

there are 3 possible rules: 'true', 'false' and 'rule'. 'true' is term indicating
true. 'false' is term indicating false. 'rule' is rule to be evaluated for a given
alert and may be true or false depending on alert's content.
'rule' have two parameters: 'path' and comparison mode ('equals' or 'contains' -
they are described later on).
example rules can look like this:
<true>  <!-- always true -->
<false> <!-- always false-->
<rule path="A" equals="B"/>      <!-- true if element A has value B (*)-->
<rule path="A" lessthan="B"/>    <!-- true if element A has value less than B (*) -->
<rule path="A" greaterthan="B"/> <!-- true if element A has value greater than B (*) -->
<rule path="A" contains="B"/>    <!-- true if element A contains string B -->
<rule path="A" regexp="R"/>      <!-- true if element A matches extended POSIX
                                      regular expression R -->
<rule path="A" regexpci="R"/>    <!-- true if element A matches (case insensitive)
                                      extended POSIX regular expression R -->
<rule path="A" formatter="tsProc( value(), `%Y.%M.%D %h:%m:%s`)" equals="B"/>
                                 <!-- true if element A is a timestamp, and converted to
                                      "year.month.day hour:min:sec" has value B (*) (**) -->
(*)  note that if both value of element A *and* constant B are numbers, comparison
     is performed using numerical values, opposite to default, lexicographical
     comparison schema.
(**) note that strings are quoted with '`' (backtick) instead of common '"', since
     it must be escaped in XMLs (&quote;) making formatter less readable.
'path' consists of string that represents position in alerts' hierarchy. assuming
that all collection types are marked as '[]' in place of element's index the full
tree looks like this:
-------------
metaalert.id
metaalert.name
metaalert.severitydelta
metaalert.certaintydelta
metaalert.referenceurl.name
metaalert.referenceurl.url
metaalert.created
metaalert.leafs.[]    # pseudo-collection of all leafs of this node (also non-direct)
metaalert.isleaf      # "true"->alert / "false"->children
metaalert.severity    # pseudo-element computing severity of a given meta alert on demand
metaalert.certainty   # pseudo-element computing certainty of a given meta alert on demand
metaalert.children.[] # each child is meta-alert as well
metaalert.alert.name
metaalert.alert.detected
metaalert.alert.created
metaalert.alert.certainty
metaalert.alert.severity
metaalert.alert.description
metaalert.alert.analyzers.[].name
metaalert.alert.analyzers.[].version
metaalert.alert.analyzers.[].os
metaalert.alert.analyzers.[].ip
metaalert.alert.sources.[].ip
metaalert.alert.sources.[].netmask
metaalert.alert.sources.[].os
metaalert.alert.sources.[].referenceurl.name
metaalert.alert.sources.[].referenceurl.url
metaalert.alert.sources.[].name
metaalert.alert.sources.[].services.[].name
metaalert.alert.sources.[].services.[].port
metaalert.alert.sources.[].services.[].protocol
metaalert.alert.sources.[].services.[].referenceurl.name
metaalert.alert.sources.[].services.[].referenceurl.url
metaalert.alert.sources.[].processes.[].path
metaalert.alert.sources.[].processes.[].name
metaalert.alert.sources.[].processes.[].md5
metaalert.alert.sources.[].processes.[].pid
metaalert.alert.sources.[].processes.[].uid
metaalert.alert.sources.[].processes.[].username
metaalert.alert.sources.[].processes.[].parameters
metaalert.alert.sources.[].processes.[].referenceurl.name
metaalert.alert.sources.[].processes.[].referenceurl.url
metaalert.alert.targets.[].ip
metaalert.alert.targets.[].netmask
metaalert.alert.targets.[].os
metaalert.alert.targets.[].referenceurl.name
metaalert.alert.targets.[].referenceurl.url
metaalert.alert.targets.[].name
metaalert.alert.targets.[].services.[].name
metaalert.alert.targets.[].services.[].port
metaalert.alert.targets.[].services.[].protocol
metaalert.alert.targets.[].services.[].referenceurl.name
metaalert.alert.targets.[].services.[].referenceurl.url
metaalert.alert.targets.[].processes.[].path
metaalert.alert.targets.[].processes.[].name
metaalert.alert.targets.[].processes.[].md5
metaalert.alert.targets.[].processes.[].pid
metaalert.alert.targets.[].processes.[].uid
metaalert.alert.targets.[].processes.[].username
metaalert.alert.targets.[].processes.[].parameters
metaalert.alert.targets.[].processes.[].referenceurl.name
metaalert.alert.targets.[].processes.[].referenceurl.url
-------------
notice that since elements in collections are in undefined order there are no
indexes available. instead two markers are present: '*' and '$'. putting '*' in
place of collection index means 'all elements must be match given rule'.
putting '$' in place of collection index means 'any element must match given
rule'.

formatters are optional, and can be used to post-process elements read from a
given path. typical example here is obtaining human-readable date/time
information from timestamp value. available formatters are:

1. value()
special function, returning raw value, as read from a given path.

2. tsProc(in, format)
timestamp processor. changes epoch timestamps to strings. parameters are:
  - in     - input to a function (timestamp to use).
  - format - output format. string is enclosed between '`' (backtick) tokens.
             tokens `%x` are special signs, that tells to insert special
             modifier. all other tokens are copied verbatim to the output
             string. possible modifiers are:
     - %Y - 4-digit year.
     - %m - 2-digit month (1-12).
     - %d - 2-digit day of month (1-31).
     - %H - 2-digit hour (0-23).
     - %M - 2-digit minute (0-59).
     - %S - 2-digit second (0-59).
     - %% - '%' sign.

3. sub(a, b)
returns result of "a-b". both arguments must be a decimal numbers.

4. add(a1, a2, ..., aN)
returns sum of all arguments. all arguments must be decimal numbers.

5. mul(a1, a2, ..., aN)
returns multiplicity of all arguments. all arguments must be decimal numbers.

6. div(a, b)
returns result of "a/b". both arguments must be a decimal numbers.

7. sig(a)
returns "-1" for negative numbers, "+1" for positive numbers and "0" for "0".
"a" must be a decimal number.

8. min(a1, a2, ..., aN)
returns minimum of all values. if all arguments are numbers, numerical
comparison is performed, otherwise lexicographical comparison is run.

9. max(a1, a2, ..., aN)
returns maximum of all values. if all arguments are numbers, numerical
comparison is performed, otherwise lexicographical comparison is run.

10. abs(a)
returns absolute value of a number "a". "a" must be a numerical value.

11. ceil(a)
returns round-up of a given number "a". "a" must be a numerical value.

12. floor(a)
returns round-down of a given number "a". "a" must be a numerical value.

13. round(a)
returns round of a given number "a", to the nearest integer. "a" must be a numerical value.

14. mod(a, b)
returns "a" modulo "b". both arguments must be positive, integer numbers.

example preprocessors' configs along with description goes here:

<preprocessor>
  <accept>
    <and>
      <rule path="metaalert.alert.name"        contains="ssh"/>
      <rule path="metaalert.alert.target.$.ip" equals="1.2.3.4"/>
    </and>
  </accept>
  <reject>
    <true/>
  </reject>
</preprocessor>
accepts only alerts that name contains string 'ssh' and at least one target host
is '1.2.3.4'. all other alerts will be rejected.

<preprocessor>
  <reject>
    <rule path="metaalert.alert.source.*.name" equals="my.security.scanner.org"/>
  </reject>
</preprocessor>
rejects all alerts that were generated by source host whose name's
"my.security.scanner.org". all other alerts will be accepted. notice
that we use '*' here, so if alert will consist of reports generated
by multiple hosts (including 'my.security.scanner.org') alert may still
be accepted. this is safe approach in this context.

<preprocessor>
  <reject>
    <rule path="metaalert.alert.description" regexpci="^kernel o+ps"/>
  </reject>
</preprocessor>
rejects all alerts that informs about kernel oopses (i.e. begins with
"Kernel Oops", "kernel oops", "Kernel oooops", and so on...). all other
alerts are accepted (by default accept rule).

preprocessor is now available after reading alerts from inputs. this is 'preprocessor'
section under main config file's root node. they are also used in triggers, to add more
robust configuration capabilities for selecting reacting on certain events.

almost identical syntax to preprocessor is also used by Python interfaces. minor
differences are described in sections dedicated to these configurations.


command line arguments
======================

ACARM-ng accepts command line arguments as well. using this interface,
application can daemonize durring start (-d), drop privileges (-u <uid>
and -g <gid>), print raw version (-v), etc...

full list of command line arguments can be obtained by running application
with -h flag. note that ACARM-ng is compatible with GNU notation of using
single '-' for short parameter names (ex. -h) and '--' for long ones (ex.
--help).
