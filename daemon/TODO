* re-reading configuration from file (note: not all configuration may change at runtime).
* refactor ConfigIO - it should read configuration file and keep it in memory. proper handles for specific parts of configuration file should be implemented by interested components.
* think how to overcome lack of additional data assigned for observed graph nodes in filters during normal run - they will not be present after reading from persistency.
* update Persistency::Postgres::Restorer to use set<> internally instead of vector and so remove duplicates on-the-fly, then copy response to output vector.
* add parse-at-read feature to configio - config should be accepted or rejected when running application, not delayed until acctuall usage (note: this task is connected with config's refactoring to register parsers).
* if filters' prerequisites are not enought consider adding userd-defined rules in config file as well.
* ipblackfilter does not save paramters in data base - after restart the same alerts will get severity incremetned once more; soncider saving MetaAlertID->done/notdone as a config paramter.
* implement common configuration module for compile-time constants used in code.
* implement helper wrapper for making pipe-line processing in filters.
* filter that increases priority for hosts that are out of defined set (i.e. from external network).
* test if ACARM-ng deals fine with loosing connection to data base.
* add automatic queue reduction to triggers - before sending check if some of the alerts are not part of others.
* add handle for out-of-memory problem (i.e. using own wrapper for memory manager).
* consider adding pre-requisites for triggers, i.e. to trigger only reports of some specific content (preprocessor-like style).
* add possibility to turn-off persistency cleanup.
* add information to logs, that if cleanup takes more than ??% of waiting time, interval should be decreased.
* moved maximum time in DB from code to config file (consider special section general/cleanup/...).
* make filters, triggers, persistency and inputs plugins given as shared library in a given directory instead of registered in the code directly.
