* re-reading configuration from file (note: not all configuration may change at runtime).
* refactor ConfigIO - it should read configuration file and keep it in memory. proper handles for specific parts of configuration file should be implemented by interested components.
* update Persistency::Postgres::Restorer to use set<> internally instead of vector and so remove duplicates on-the-fly, then copy response to output vector.
* add parse-at-read feature to configio - config should be accepted or rejected when running application, not delayed until acctuall usage (note: this task is connected with config's refactoring to register parsers).
* if filters' prerequisites are not enought consider adding user-defined rules in config file as well.
* ipblackfilter does not save paramters in data base - after restart the same alerts will get severity incremetned once more; soncider saving MetaAlertID->done/notdone as a config paramter.
* implement common configuration module for compile-time constants used in code.
* filter that increases priority for hosts that are out of defined set (i.e. from external network).
* test if ACARM-ng deals fine with loosing connection to data base.
* add automatic queue reduction to triggers - before sending check if some of the alerts are not part of others.
* add handle for out-of-memory problem (i.e. using own wrapper for memory manager).
* consider adding pre-requisites for triggers, i.e. to trigger only reports of some specific content (preprocessor-like style).
* add possibility to turn-off persistency cleanup.
* add information to logs, that if cleanup takes more than ??% of waiting time, interval should be decreased.
* move maximum time to hold events in DB from code to config file (consider special section general/cleanup/...).
* make filters, triggers, persistency and inputs plugins given as shared library in a given directory instead of registered in the code directly.
* investigate bug when reading meta-alerts in use from data base: DEBUG@1285160187.722/commons.exception [0] Exception.hpp:35 Commons::Exception::Exception(const System::Exceptions::detail::Location&, const T&) [with T = std::basic_string<char, std::char_traits<char>, std::allocator<char> >]: exception (N7Commons9ExceptionE) rised in /home/acarm-ng/acarm-ng-sources/daemon/persistencypostgres/Persistency/IO/Postgres/StorageDataCache.hpp:70@Persistency::IO::Postgres::DataBaseID Persistency::IO::Postgres::StorageDataCache<T>::get(boost::shared_ptr<T>) const [with T = Persistency::MetaAlert]: /home/acarm-ng/acarm-ng-sources/daemon/persistencypostgres/Persistency/IO/Postgres/StorageDataCache.hpp:70@Persistency::IO::Postgres::DataBaseID Persistency::IO::Postgres::StorageDataCache<T>::get(boost::shared_ptr<T>) const [with T = Persistency::MetaAlert]: PostgreSQL peristency exception: entry to be read does not exist; stack trace is: /home/acarm-ng/libs/libsystem.so(_ZN6System9BacktraceC1Ev+0x7f) [0x7ffadd576b9b]./home/acarm-ng/libs/libcore.so(_ZN7Commons9ExceptionC2ISsEERKN6System10Exceptions6detail8LocationERKT_+0x6d) [0x7ffae402fb85]./home/acarm-ng/libs/libinputprelude.so(_ZN11Persistency9ExceptionC2ISsEERKN6System10Exceptions6detail8LocationERKT_+0x34) [0x7ffae3dcee38]./home/acarm-ng/libs/libpersistencypostgres.so(_ZN11Persistency2IO9ExceptionC2ISsEERKN6System10Exceptions6detail8LocationERKT_+0x34) [0x7ffae3001f2a]./home/acarm-ng/libs/libpersistencypostgres.so(_ZN11Persistency2IO8Postgres9ExceptionC2IA32_cEERKN6System10Exceptions6detail8LocationERKT_+0x4f) [0x7ffae3001fa1]./home/acarm-ng/libs/libpersistencypostgres.so(_ZN11Persistency2IO8Postgres20ExceptionNoSuchEntryC1ERKN6System10Exceptions6detail8LocationE+0x33) [0x7ffae3018fd1]./home/acarm-ng/libs/libpersistencypostgres.so(_ZNK11Persistency2IO8Postgres16StorageDataCacheINS_9MetaAlertEE3getEN5boost10shared_ptrIS3_EE+0x100) [0x7ffae301e68e]./home/acarm-ng/libs/libpersistencypostgres.so(_ZNK11Persistency2IO8Postgres7IDCache3getIN7Commons16SharedPtrNotNULLINS_9MetaAlertEEEEElRKT_+0x48) [0x7ffae301e820]./home/acarm-ng/libs/libpersistencypostgres.so(_ZN11Persistency2IO8Postgres9MetaAlert5getIDEv+0x59) [0x7ffae3019fb5]./home/acarm-ng/libs/libpersistencypostgres.so(_ZN11Persistency2IO8Postgres9MetaAlert16markAsUnusedImplERNS0_11TransactionE+0x5d) [0x7ffae301b4dd]./home/acarm-ng/libs/libpersistency.so(_ZN11Persistency2IO9MetaAlert12markAsUnusedEv+0x44) [0x7ffadf3ca772]./home/acarm-ng/libs/libpersistency.so(_ZN11Persistency2IO20GlobalConnectionImpl12markAsUnusedEN7Commons16SharedPtrNotNULLINS_9MetaAlertEEE+0x391) [0x7ffadf3c9229]./home/acarm-ng/libs/libpersistency.so(_ZN11Persistency9GraphNodeD1Ev+0x5e) [0x7ffadf3a7fa0]./home/acarm-ng/libs/libcore.so(_ZN5boost14checked_deleteIN11Persistency9GraphNodeEEEvPT_+0x33) [0x7ffae404af86]./home/acarm-ng/libs/libcore.so(_ZN5boost6detail17sp_counted_impl_pIN11Persistency9GraphNodeEE7disposeEv+0x28) [0x7ffae404b0ee]./home/acarm-ng/libs/libcore.so(_ZN5boost6detail15sp_counted_base7releaseEv+0x4b) [0x7ffae402b3a3]./home/acarm-ng/libs/libcore.so(_ZN5boost6detail12shared_countD1Ev+0x33) [0x7ffae402b3f5]./home/acarm-ng/libs/libcore.so(_ZN5boost10shared_ptrIN11Persistency9GraphNodeEED1Ev+0x28) [0x7ffae403aa6e]./home/acarm-ng/libs/libcore.so(_ZN7Commons16SharedPtrNotNULLIN11Persistency9GraphNodeEED1Ev+0x24) [0x7ffae403aaa8]./home/acarm-ng/libs/libcore.so(_ZSt8_DestroyIN7Commons16SharedPtrNotNULLIN11Persistency9GraphNodeEEEEvPT_+0x24) [0x7ffae4041a9e]./home/acarm-ng/libs/libcore.so(_ZSt8_DestroyIPN7Commons16SharedPtrNotNULLIN11Persistency9GraphNodeEEEEvT_S6_+0x2a) [0x7ffae4041ade]./home/acarm-ng/libs/libcore.so(_ZSt8_DestroyIPN7Commons16SharedPtrNotNULLIN11Persistency9GraphNodeEEES4_EvT_S6_RSaIT0_E+0x30) [0x7ffae4041b33]./home/acarm-ng/libs/libcore.so(_ZNSt6vectorIN7Commons16SharedPtrNotNULLIN11Persistency9GraphNodeEEESaIS4_EED1Ev+0x3b) [0x7ffae404203b]./home/acarm-ng/libs/libpersistency.so(_ZN4Base7Threads6detail17GrowingVectorDataIN7Commons16SharedPtrNotNULLIN11Persistency9GraphNodeEEEED1Ev+0x28) [0x7ffadf3afbac]./home/acarm-ng/libs/libpersistency.so(_ZN5boost14checked_deleteIN4Base7Threads6detail17GrowingVectorDataIN7Commons16SharedPtrNotNULLIN11Persistency9GraphNodeEEEEEEEvPT_+0x33) [0x7ffadf3afbfe]./home/acarm-ng/libs/libpersistency.so(_ZN5boost6detail17sp_counted_impl_pIN4Base7Threads6detail17GrowingVectorDataIN7Commons16SharedPtrNotNULLIN11Persistency9GraphNodeEEEEEE7disposeEv+0x28) [0x7ffadf3afd66]./home/acarm-ng/libs/libcore.so(_ZN5boost6detail15sp_counted_base7releaseEv+0x4b) [0x7ffae402b3a3]./home/acarm-ng/libs/libcore.so(_ZN5boost6detail12shared_countD1Ev+0x33) [0x7ffae402b3f5]./home/acarm-ng/libs/libtrigger.so(_ZN5boost10shared_ptrIN4Base7Threads6detail17GrowingVectorDataIN7Commons16SharedPtrNotNULLIN11Persistency9GraphNodeEEEEEED1Ev+0x28) [0x7ffadfcf88b8]./home/acarm-ng/libs/libpersistency.so(_ZN4Base7Threads13GrowingVectorIN7Commons16SharedPtrNotNULLIN11Persistency9GraphNodeEEEED1Ev+0x2b) [0x7ffadf3afb27]./home/acarm-ng/libs/libpersistency.so(_ZN11Persistency9GraphNodeD1Ev+0x529) [0x7ffadf3a846b]./home/acarm-ng/libs/libcore.so(_ZN5boost14checked_deleteIN11Persistency9GraphNodeEEEvPT_+0x33) [0x7ffae404af86]./home/acarm-ng/libs/libcore.so(_ZN5boost6detail17sp_counted_impl_pIN11Persistency9GraphNodeEE7disposeEv+0x28) [0x7ffae404b0ee]./home/acarm-ng/libs/libcore.so(_ZN5boost6detail15sp_counted_base7releaseEv+0x4b) [0x7ffae402b3a3]./home/acarm-ng/libs/libcore.so(_ZN5boost6detail12shared_countD1Ev+0x33) [0x7ffae402b3f5]./home/acarm-ng/libs/libcore.so(_ZN5boost10shared_ptrIN11Persistency9GraphNodeEED1Ev+0x28) [0x7ffae403aa6e]./home/acarm-ng/libs/libcore.so(_ZN7Commons16SharedPtrNotNULLIN11Persistency9GraphNodeEED1Ev+0x24) [0x7ffae403aaa8]./home/acarm-ng/libs/libpersistencypostgres.so(_ZNSt4pairIKlN7Commons16SharedPtrNotNULLIN11Persistency9GraphNodeEEEED1Ev+0x28) [0x7ffae302310c]./home/acarm-ng/libs/libpersistencypostgres.so(_ZN9__gnu_cxx13new_allocatorISt4pairIKlN7Commons16SharedPtrNotNULLIN11Persistency9GraphNodeEEEEE7destroyEPS8_+0x28) [0x7ffae3024fc6]./home/acarm-ng/libs/libpersistencypostgres.so(_ZNSt8_Rb_treeIlSt4pairIKlN7Commons16SharedPtrNotNULLIN11Persistency9GraphNodeEEEESt10_Select1stIS7_ESt4lessIlESaIS7_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS7_E+0x41) [0x7ffae302a59f]./home/acarm-ng/libs/libpersistencypostgres.so(_ZNSt8_Rb_treeIlSt4pairIKlN7Commons16SharedPtrNotNULLIN11Persistency9GraphNodeEEEESt10_Select1stIS7_ESt4lessIlESaIS7_EE8_M_eraseEPSt13_Rb_tree_nodeIS7_E+0x50) [0x7ffae302a620]./home/acarm-ng/libs/libpersistencypostgres.so(_ZNSt8_Rb_treeIlSt4pairIKlN7Commons16SharedPtrNotNULLIN11Persistency9GraphNodeEEEESt10_Select1stIS7_ESt4lessIlESaIS7_EED1Ev+0x33) [0x7ffae302a679]./home/acarm-ng/libs/libpersistencypostgres.so(_ZNSt3mapIlN7Commons16SharedPtrNotNULLIN11Persistency9GraphNodeEEESt4lessIlESaISt4pairIKlS4_EEED1Ev+0x24) [0x7ffae302a6fa]./home/acarm-ng/libs/libpersistencypostgres.so(_ZN11Persistency2IO8Postgres14ReverseIDCacheIN7Commons16SharedPtrNotNULLINS_9GraphNodeEEEED1Ev+0x24) [0x7ffae302a734]./home/acarm-ng/libs/libpersistencypostgres.so(_ZN11Persistency2IO8Postgres8RestorerD0Ev+0x9e) [0x7ffae302b652]./home/acarm-ng/libs/libcore.so(_ZNSt8auto_ptrIN11Persistency2IO8RestorerEED1Ev+0x41) [0x7ffae404159d]./home/acarm-ng/libs/libcore.so(_ZN4Core13QueueRestorerC1EN7Commons16SharedPtrNotNULLIN11Persistency2IO10ConnectionEEERN4Base7Threads9FifoQueueINS_5Types10SignedNodeENS8_19FifoAcceptAllPolicyEEE+0x881) [0x7ffae4040859]./home/acarm-ng/libs/libcore.so(_ZN4Core4MainC1Ev+0xf7) [0x7ffae403a409]../acarmng(main+0xfc) [0x405379]./lib/libc.so.6(__libc_start_main+0xe6) [0x7ffadc65e1a6]../acarmng(_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_+0xb9) [0x404eb9]. // NEW LINE // WARN @1285160187.722/persistency.io.transaction [0] Persistency/IO/Transaction.cpp:38 Persistency::IO::Transaction::~Transaction(): global_connection_impl_markasunused: transaction has not been commited/rollbacked - doing automatic rollback upon transaction destruction
* add support for specifying multiple receivers in triggers (consider comma/semicolon separated entries).
